require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe FeaturesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Feature. As you add validations to Feature, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: 'name',
      description_markdown: 'markdown'
    }
  }

  let(:invalid_attributes) {
    { invalid: 'markdown' }
  }
  before(:all) do
    @test_suite = TestSuite.create(name: 'test')
  end

  before(:each) do
    allow_any_instance_of(ApplicationController).to receive(:require_user).and_return(true)
  end

  after(:all) do
    Feature.destroy_all
    TestSuite.destroy_all
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # FeaturesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all features as @features" do
      feature = Feature.new valid_attributes
      feature.test_suite = @test_suite
      feature.save!
      get :index, test_suite_id: @test_suite.id
      expect(assigns(:features)).to eq([feature])
    end
  end

  describe "GET #show" do
    it "assigns the requested feature as @feature" do
      feature = Feature.new valid_attributes
      feature.test_suite = @test_suite
      feature.save!
      get :show, test_suite_id: @test_suite.id, :id => feature.to_param
      expect(assigns(:feature)).to eq(feature)
    end
  end

  describe "GET #new" do
    it "assigns a new feature as @feature" do
      get :new, test_suite_id: @test_suite.id
      expect(assigns(:feature)).to be_a_new(Feature)
    end
  end

  describe "GET #edit" do
    it "assigns the requested feature as @feature" do
      feature = Feature.new valid_attributes
      feature.test_suite = @test_suite
      feature.save!
      get :edit, test_suite_id: @test_suite.id, :id => feature.to_param
      expect(assigns(:feature)).to eq(feature)
    end
  end

end
