require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe FeaturesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Feature. As you add validations to Feature, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: 'name',
      description_markdown: 'markdown'
    }
  }

  let(:invalid_attributes) {
    { name: '' }
  }
  before(:all) do
    @test_suite = TestSuite.create(name: 'test')
  end

  before(:each) do
    allow_any_instance_of(ApplicationController).to receive(:require_user).and_return(true)
  end

  after(:all) do
    Feature.destroy_all
    TestSuite.destroy_all
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # FeaturesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #show" do
    it "assigns the requested feature as @feature" do
      feature = Feature.new valid_attributes
      feature.test_suite = @test_suite
      feature.save!
      get :show, test_suite_id: @test_suite.id, :id => feature.to_param
      expect(assigns(:feature)).to eq(feature)
    end
  end

  describe "GET #new" do
    it "assigns a new feature as @feature" do
      get :new, test_suite_id: @test_suite.id
      expect(assigns(:feature)).to be_a_new(Feature)
    end
  end

  describe "GET #edit" do
    it "assigns the requested feature as @feature" do
      feature = Feature.new valid_attributes
      feature.test_suite = @test_suite
      feature.save!
      get :edit, test_suite_id: @test_suite.id, :id => feature.to_param
      expect(assigns(:feature)).to eq(feature)
    end
  end

  describe "PUT #update" do
    before(:each) do
      @feature = Feature.new valid_attributes
      @feature.test_suite = @test_suite
      @feature.save!
    end
    context "with valid params" do
      let(:new_valid_attributes) {
        {
          name: 'name',
          description_markdown: '## Markdown'
        }
      }

      it "updates a feature as @feature" do
        put :update, { test_suite_id: @test_suite.id, id: @feature, :feature => new_valid_attributes}
        @feature.reload
        expect(@feature.description_markdown).to eq('## Markdown')
        expect(@feature.description_html).to eq("<h2>Markdown</h2>\n")
      end

      it "redirects to the feature" do
        put :update, { test_suite_id: @test_suite.id, id: @feature, :feature => new_valid_attributes}
        expect(response).to redirect_to(test_suite_feature_path(@test_suite, assigns(:feature)))
      end
    end

    context "with invalid params" do
      it "assigns the correct feature as @feature" do
        put :update, { test_suite_id: @test_suite.id, id: @feature, :feature => invalid_attributes}
        expect(assigns(:feature)).to eq(@feature)
      end

      it "re-renders the 'new' template" do
        put :update, { test_suite_id: @test_suite.id, id: @feature, :feature => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new feature" do
        expect {
          post :create, {test_suite_id: @test_suite.id, :feature => valid_attributes}
        }.to change(Feature, :count).by(1)
      end

      it "assigns a newly created feature as @feature" do
        post :create, {test_suite_id: @test_suite.id, :feature => valid_attributes}
        expect(assigns(:feature)).to be_a(Feature)
        expect(assigns(:feature)).to be_persisted
        expect(assigns(:feature).test_suite).to eq(@test_suite)
      end

      it "redirects to the feature" do
        post :create, { test_suite_id: @test_suite.id, :feature => valid_attributes }
        expect(response).to redirect_to(test_suite_feature_path(@test_suite, assigns(:feature)))
      end
    end

    context "with invalid params" do
      it "assigns the correct feature as @feature" do
        post :create, { test_suite_id: @test_suite.id, :feature => invalid_attributes }
        expect(assigns(:feature)).to be_a_new(Feature)
      end

      it "re-renders the 'new' template" do
        post :create, { test_suite_id: @test_suite.id, :feature => invalid_attributes }
        expect(response).to render_template("new")
      end
    end
  end


  describe "DELETE #destroy" do
    it "destroys the requested feature" do
      feature = Feature.new valid_attributes
      feature.test_suite = @test_suite
      feature.save!
      expect {
        delete :destroy, { test_suite_id: @test_suite.id, id: feature.to_param }
      }.to change(Feature, :count).by(-1)
    end

    it "redirects to the users list" do
      feature = Feature.new valid_attributes
      feature.test_suite = @test_suite
      feature.save!
      delete :destroy, { test_suite_id: @test_suite.id, id: feature.to_param }
      expect(response).to redirect_to(test_suite_url(@test_suite))
    end
  end

end
